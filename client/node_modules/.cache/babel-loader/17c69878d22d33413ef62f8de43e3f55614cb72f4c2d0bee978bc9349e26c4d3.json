{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\web development\\\\New folder (2)\\\\client\\\\src\\\\pages\\\\CreatePost.js\",\n  _s = $RefreshSig$();\nimport ReactQuill from 'react-quill';\nimport 'react-quill/dist/quill.snow.css';\nimport { useState } from 'react';\nimport { Navigate } from 'react-router-dom';\nimport Editor from '../Editor';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function CreatePost() {\n  _s();\n  const [title, setTitle] = useState('');\n  const [summary, setSummary] = useState('');\n  const [content, setContent] = useState('');\n  const [files, setFiles] = useState('');\n  const [redirect, setRedirect] = useState(false);\n  async function createNewPost(ev) {\n    const data = new FormData();\n    data.set('title', title);\n    data.set('summary', summary);\n    data.set('content', content);\n    data.set('file', files[0]); //not files as selecting many file we will be taking first file only\n    ev.preventDefault();\n    const response = await fetch('http://localhost:4000/post', {\n      method: 'POST',\n      body: data,\n      credentials: 'include'\n    });\n    if (response.ok) {\n      setRedirect(true);\n    }\n  } //for this need to create endpoint for our create post request\n\n  if (redirect) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: '/'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"create-post\",\n      onSubmit: createNewPost,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"title\",\n        placeholder: 'Title',\n        value: title,\n        onChange: ev => setTitle(ev.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"summary\",\n        placeholder: 'Summary',\n        value: summary,\n        onChange: ev => setSummary(ev.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: ev => setFiles(ev.target.files)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Editor, {\n        style: {\n          marginLeft: '5px'\n        },\n        value: content,\n        onChange: setContent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          marginTop: '5px'\n        },\n        children: \"Create Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_s(CreatePost, \"uH9cWkN4Y+ABAVoVYnL+MpbmdCg=\");\n_c = CreatePost;\n;\nvar _c;\n$RefreshReg$(_c, \"CreatePost\");","map":{"version":3,"names":["ReactQuill","useState","Navigate","Editor","jsxDEV","_jsxDEV","Fragment","_Fragment","CreatePost","_s","title","setTitle","summary","setSummary","content","setContent","files","setFiles","redirect","setRedirect","createNewPost","ev","data","FormData","set","preventDefault","response","fetch","method","body","credentials","ok","to","fileName","_jsxFileName","lineNumber","columnNumber","children","className","onSubmit","type","placeholder","value","onChange","target","style","marginLeft","marginTop","_c","$RefreshReg$"],"sources":["C:/Users/DELL/Desktop/web development/New folder (2)/client/src/pages/CreatePost.js"],"sourcesContent":["import ReactQuill from 'react-quill';\r\nimport 'react-quill/dist/quill.snow.css';\r\nimport { useState } from 'react';\r\nimport {Navigate} from 'react-router-dom';\r\nimport Editor from '../Editor';\r\n\r\nexport default function CreatePost(){\r\n    const [title,setTitle]=useState('');\r\n    const [summary,setSummary]=useState('');\r\n    const [content,setContent]=useState('');\r\n    const [files,setFiles]=useState('');\r\n    const [redirect,setRedirect]=useState(false);\r\n\r\n    async function createNewPost(ev){\r\n        const data= new FormData();\r\n        data.set('title',title);\r\n        data.set('summary',summary);\r\n        data.set('content',content);\r\n        data.set('file',files[0]);//not files as selecting many file we will be taking first file only\r\n        ev.preventDefault();\r\n        const response= await fetch('http://localhost:4000/post',{\r\n            method: 'POST',\r\n            body: data,\r\n            credentials: 'include',\r\n        })\r\n\r\n        if(response.ok){\r\n            setRedirect(true);\r\n        }\r\n    }//for this need to create endpoint for our create post request\r\n    \r\n    \r\n    if(redirect){\r\n        return <Navigate to={'/'}/>\r\n    }\r\n    return <>\r\n        <form className=\"create-post\" onSubmit={createNewPost}>\r\n            <input type=\"title\" placeholder={'Title'} value={title} onChange={ev=>setTitle(ev.target.value)}/>\r\n            <input type=\"summary\" placeholder={'Summary'} value={summary} onChange={ev=>setSummary(ev.target.value)}/>\r\n            <input type=\"file\" onChange={ev=>setFiles(ev.target.files)}/>\r\n            <Editor style={{marginLeft:'5px'}} value={content} onChange={setContent} />\r\n            <button style={{marginTop:'5px'}}>Create Post</button>\r\n        </form>\r\n    </>\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}